@⁨Victor⁩  (Victor Godwin)
here is your project feedback:

Software Architecture: Project’s architecture doesn’t follow a clean architecture, ‘third_party’ directory shouldn’t be inside ‘internal’ folder, I suggest ‘infra’ as it’s own directory (in the root folder), or pkg as each of the tools implementation (eg aws, terraform) are reusable as standalone packages.

Code quality, structure, and readability: Structure can be more Go way, I advice the use of pkg directory on some of the packages especially the reusable ones, eg logger, aws, etc. Also most of the usecase implementation could be loosely coupled using interfaces to aid testing.

Proper error handling and logging.: No consistency in handling errors, candidate has a file defining errors in internal/domain/entities/errors.go, but was still had coding errors in most of the implementations. (return fmt.Errorf("no subnets found"))

Use of Golang concurrency patterns (if applicable): Candidate made used Go concurrent pattern in detectDrift method (internal/usecases/detect_drift.go), but as I was unable to run the code, it’s hard to tell of any potential issues of the implementation, but the concurrent implementation looks okay.

Clean and idiomatic Go code: Code looks clean but not so idiomatic, implementation of AWS as a usecase is tightly coupled, I recommend use of interface to encourage abstraction.

Readme and Documentation: Code didn’t run while following the instruction in the readme, the readme should be such that anyone can follow what is there to run the application. I suggest candidate follow his own readme and try to run the application.